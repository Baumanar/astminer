version: 2
jobs:
  # build with machine executor
  build:
    branches:
      ignore:
        - master
    machine:
      enabled: true
    working_directory: ~/astminer
    steps:
      - checkout:
          path: ~/astminer
      - run: ./gradlew build --stacktrace

  # release
  release:
    branches:
      only:
        - master
    machine:
      enabled: true
    working_directory: ~/astminer
    steps:
      - checkout:
          path: ~/astminer
      - run: ./gradlew bintrayUpload

  build-cli:
    branches:
      ignore:
        - master
    machine:
      enabled: true
    working_directory: ~/astminer-cli
    steps:
      - checkout:
          path: ~/astminer-cli
      - run: ./gradlew shadowJar && cd astminer-cli && ./gradlew shadowJar

  release-cli:
    branches:
      only:
        - master
    machine:
      enabled: true
    working_directory: ~/astminer-cli
    steps:
      - checkout:
          path: ~/astminer-cli
      - run: cd astminer-cli && ./gradlew bintrayUpload

  # run the Python example
  py_example:
    docker:
      - image: openkbs/jdk-mvn-py3
    working_directory: ~/astminer/py_example
    # Unless we restrict JVM memory, Kotlin compilation fails
    environment:
      JVM_OPTS: -Xmx2048m
      GRADLE_OPTS: -Xmx1536m -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.parallel=false -Dkotlin.incremental=false
    steps:
      - checkout:
          path: ~/astminer
      - run:
          name: Disable gradle daemon
          command: mkdir -p ~/.gradle && echo "org.gradle.daemon=false" >> ~/.gradle/gradle.properties
      - run:
          name: Create environment
          command: python3 -m virtualenv env
      - run:
          name: Activate environment
          command: source env/bin/activate
      - run:
          name: Install requirements
          command: pip3 install --user -r requirements.txt
      - run:
          name: Run processing
          command: python3 run_example.py


workflows:
  version: 2
  build:
    jobs:
      - build

  # release with manual approval in CircleCI app
  release:
    jobs:
      - build
      - approve-release:
          type: approval
          requires:
            - build
      - release:
          requires:
            - approve-release

  build-cli:
    jobs:
      - build-cli

  release-cli:
    jobs:
      - build-cli
      - approve-release-cli:
          type: approval
          requires:
            - build-cli
      - release-cli:
          requires:
            - approve-release-cli

#  py_example:
#    jobs:
#      - py_example
